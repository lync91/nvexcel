{"version":3,"sources":["../../src/components/Button/DefaultButton/DefaultButton.styles.ts","../../src/components/Button/ButtonThemes.ts","../../src/components/Button/DefaultButton/DefaultButton.tsx","../../src/components/Separator/Separator.base.tsx","../../src/components/Separator/Separator.tsx","../../src/components/Separator/Separator.styles.ts","../../src/components/Label/Label.base.tsx","../../src/components/Label/Label.tsx","../../src/components/Label/Label.styles.ts","../../src/utilities.ts","../../src/slots.tsx","../../src/createComponent.tsx","../../src/components/Stack/StackUtils.ts","../../src/components/Stack/Stack.styles.ts","../../src/components/Stack/StackItem/StackItem.styles.ts","../../src/components/Stack/StackItem/StackItem.tsx","../../src/components/Stack/Stack.tsx","../../src/components/Toggle/Toggle.base.tsx","../../src/components/Toggle/Toggle.tsx","../../src/components/Toggle/Toggle.styles.ts"],"names":["getStyles","memoize","theme","customStyles","primary","baseButtonStyles","splitButtonStyles","defaultButtonStyles","root","minWidth","height","label","fontWeight","semibold","p","palette","s","semanticColors","backgroundColor","primaryButtonBackground","border","color","primaryButtonText","selectors","borderColor","MsHighContrastAdjust","outlineColor","white","rootHovered","primaryButtonBackgroundHovered","primaryButtonTextHovered","rootPressed","primaryButtonBackgroundPressed","primaryButtonTextPressed","rootExpanded","rootChecked","rootCheckedHovered","rootDisabled","splitButtonContainer","splitButtonDivider","position","width","right","top","bottom","splitButtonMenuButton","splitButtonMenuButtonDisabled","primaryButtonBackgroundDisabled","splitButtonMenuButtonChecked","splitButtonMenuButtonExpanded","splitButtonMenuIcon","splitButtonMenuIconDisabled","neutralTertiary","primaryStyles","buttonBackground","buttonBackgroundPressed","buttonBackgroundHovered","buttonText","buttonTextHovered","buttonTextChecked","buttonTextCheckedHovered","neutralLight","buttonBackgroundDisabled","neutralTertiaryAlt","splitButtonDividerDisabled","neutralQuaternaryAlt","buttonTextDisabled","standardStyles","render","styles","BaseButton","this","props","variantClassName","onRenderDescription","DefaultButton","customizable","getClassNames","classNamesFunction","Separator","styled","className","vertical","alignContent","_classNames","content","role","children","alignStart","alignCenter","alignEnd","fonts","medium","textAlign","verticalAlign","padding","display","zIndex","neutralLighter","left","bodyText","background","bodyBackground","undefined","scope","cacheSize","as","disabled","required","classNames","RootType","Label","labelFontWeight","labelColor","labelDisabledColor","disabledBodyText","labelRequiredStarColor","errorText","boxSizing","boxShadow","margin","wordWrap","overflowWrap","paddingRight","withSlots","type","slotType","isSlot","numChildren","count","toArray","createFactory","DefaultComponent","options","defaultProp","componentProps","userProps","userSlotOptions","defaultStyles","finalProps","allProps","push","rtl","_constructFinalProps","slotProps","transformedProps","_translateShorthand","component","UserComponent","defaultFactory","getSlots","slots","result","mixedProps","hasOwnProperty","slot","args","length","Error","_renderSlot","_defaultStyles","ComponentType","slotOptions","create","createComponent","view","factoryOptions","displayName","context","fields","settings","CustomizerContext","Customizations","getSettings","customizations","useState","state","tokens","_resolveTokens","allTokens","currentTokens","Array","isArray","allStyles","map","_resolveStyles","viewProps","name","statics","_getThemedSpacing","space","spacing","_getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","toString","value","unit","substring","parsePadding","paddingValues","split","reduce","padding1","padding2","nameMap","start","end","GlobalClassNames","inner","alignMap","StackItem","grow","shrink","disableShrink","align","verticalFill","order","flexGrow","flexShrink","alignSelf","Stack","wrap","warnDeprecations","maxHeight","maxWidth","stackChildren","child","index","item","defaultItemProps","nativeProps","rest","Slots","horizontal","reversed","horizontalAlign","childrenGap","rowGap","columnGap","splitGap","calculatedGap","horizontalMargin","verticalMargin","childStyles","textOverflow","commonSelectors","flexWrap","overflow","marginLeft","marginRight","marginTop","marginBottom","flexDirection","Item","_toggleButton","_onClick","ev","checked","onChange","onChanged","onClick","checkedProp","setState","initializeComponentRef","warnMutuallyExclusive","onAriaLabel","offAriaLabel","defaultChecked","_id","id","getId","getDerivedStateFromProps","nextProps","prevState","keytipProps","ariaLabel","offText","onText","inlineLabel","stateText","badAriaLabel","toggleNativeProps","onOffMissing","labelId","stateTextId","labelledById","ariaRole","hidden","htmlFor","container","KeytipData","ariaDescribedBy","keytipAttributes","pill","ref","_noop","text","focus","current","Toggle","pillUncheckedBackground","pillCheckedBackground","inputBackgroundChecked","pillCheckedHoveredBackground","themeDark","thumbUncheckedHoveredBackground","neutralDark","pillCheckedDisabledBackground","disabledBodySubtext","thumbBackground","smallInputBorder","thumbCheckedBackground","inputForegroundChecked","thumbDisabledBackground","thumbCheckedDisabledBackground","disabledBackground","pillBorderColor","pillBorderHoveredColor","inputBorderHovered","pillBorderDisabledColor","textDisabledColor","disabledText","alignItems","wordBreak","inset","fontSize","borderRadius","DEFAULT_PILL_HEIGHT","transition","cursor","justifyContent","thumb","borderWidth","borderStyle","userSelect","regular"],"mappings":"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","file":"static/js/0.8a9782c1.chunk.js","sourcesContent":["import { IButtonStyles } from '../Button.types';\nimport { ITheme, concatStyleSets, FontWeights } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\n\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\n\nconst DEFAULT_BUTTON_HEIGHT = '32px';\nconst DEFAULT_BUTTON_MIN_WIDTH = '80px';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, primary?: boolean): IButtonStyles => {\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const defaultButtonStyles: IButtonStyles = {\n      root: {\n        minWidth: DEFAULT_BUTTON_MIN_WIDTH,\n        height: DEFAULT_BUTTON_HEIGHT,\n      },\n      label: {\n        fontWeight: FontWeights.semibold,\n      },\n    };\n\n    return concatStyleSets(\n      baseButtonStyles,\n      defaultButtonStyles,\n      primary ? primaryStyles(theme) : standardStyles(theme),\n      splitButtonStyles,\n      customStyles,\n    )!;\n  },\n);\n","import { IButtonStyles } from './Button.types';\nimport { ITheme, HighContrastSelector, IRawStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nconst splitButtonDividerBaseStyles = (): IRawStyle => {\n  return {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8,\n  };\n};\n\nexport function standardStyles(theme: ITheme): IButtonStyles {\n  const { semanticColors: s, palette: p } = theme;\n\n  const buttonBackground = s.buttonBackground;\n  const buttonBackgroundPressed = s.buttonBackgroundPressed;\n  const buttonBackgroundHovered = s.buttonBackgroundHovered;\n\n  const buttonText = s.buttonText;\n  const buttonTextHovered = s.buttonTextHovered;\n  const buttonTextChecked = s.buttonTextChecked;\n  const buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n\n  return {\n    root: {\n      backgroundColor: buttonBackground,\n      color: buttonText,\n    },\n\n    rootHovered: {\n      backgroundColor: buttonBackgroundHovered,\n      color: buttonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootExpanded: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootChecked: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextCheckedHovered,\n    },\n\n    rootDisabled: {\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      color: p.white,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralLight,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.buttonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.buttonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.neutralTertiaryAlt,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n      },\n    },\n\n    splitButtonDividerDisabled: {\n      backgroundColor: theme.palette.neutralTertiaryAlt,\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.buttonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: s.buttonTextDisabled,\n    },\n  };\n}\n\nexport function primaryStyles(theme: ITheme): IButtonStyles {\n  const { palette: p, semanticColors: s } = theme;\n\n  return {\n    root: {\n      backgroundColor: s.primaryButtonBackground,\n      border: `1px solid ${s.primaryButtonBackground}`,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          MsHighContrastAdjust: 'none',\n        },\n        [`.${IsFocusVisibleClassName} &:focus`]: {\n          selectors: {\n            ':after': {\n              border: `none`,\n              outlineColor: p.white,\n            },\n          },\n        },\n      },\n    },\n\n    rootHovered: {\n      backgroundColor: s.primaryButtonBackgroundHovered,\n      border: `1px solid ${s.primaryButtonBackgroundHovered}`,\n      color: s.primaryButtonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      border: `1px solid ${s.primaryButtonBackgroundPressed}`,\n      color: s.primaryButtonTextPressed,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          MsHighContrastAdjust: 'none',\n        },\n      },\n    },\n\n    rootExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootDisabled: {\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.white,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      backgroundColor: s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundHovered,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.primaryButtonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: p.neutralTertiary,\n\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  };\n}\n","import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { IButtonProps } from '../Button.types';\nimport { getStyles } from './DefaultButton.styles';\n\n/**\n * {@docCategory Button}\n */\n@customizable('DefaultButton', ['theme', 'styles'], true)\nexport class DefaultButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { primary = false, styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName={primary ? 'ms-Button--primary' : 'ms-Button--default'}\n        styles={getStyles(theme!, styles, primary)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { ISeparatorProps, ISeparatorStyles, ISeparatorStyleProps } from './Separator.types';\n\nconst getClassNames = classNamesFunction<ISeparatorStyleProps, ISeparatorStyles>();\n\nexport const SeparatorBase: React.FunctionComponent<ISeparatorProps> = (props: ISeparatorProps): JSX.Element => {\n  const { styles, theme, className, vertical, alignContent } = props;\n\n  const _classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    alignContent: alignContent,\n    vertical: vertical,\n  });\n\n  return (\n    <div className={_classNames.root}>\n      <div className={_classNames.content} role=\"separator\" aria-orientation={vertical ? 'vertical' : 'horizontal'}>\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ISeparatorProps, ISeparatorStyleProps, ISeparatorStyles } from './Separator.types';\nimport { getStyles } from './Separator.styles';\nimport { SeparatorBase } from './Separator.base';\n\nexport const Separator: React.FunctionComponent<ISeparatorProps> = styled<\n  ISeparatorProps,\n  ISeparatorStyleProps,\n  ISeparatorStyles\n>(SeparatorBase, getStyles, undefined, {\n  scope: 'Separator',\n});\n","import { ISeparatorStyleProps, ISeparatorStyles } from './Separator.types';\n\nexport const getStyles = (props: ISeparatorStyleProps): ISeparatorStyles => {\n  const { theme, alignContent, vertical, className } = props;\n\n  const alignStart = alignContent === 'start';\n  const alignCenter = alignContent === 'center';\n  const alignEnd = alignContent === 'end';\n\n  return {\n    root: [\n      theme.fonts.medium,\n      {\n        position: 'relative',\n      },\n      alignContent && {\n        textAlign: alignContent,\n      },\n      !alignContent && {\n        textAlign: 'center',\n      },\n      vertical &&\n        (alignCenter || !alignContent) && {\n          verticalAlign: 'middle',\n        },\n      vertical &&\n        alignStart && {\n          verticalAlign: 'top',\n        },\n      vertical &&\n        alignEnd && {\n          verticalAlign: 'bottom',\n        },\n      vertical && {\n        padding: '0 4px',\n        height: 'inherit',\n        display: 'table-cell',\n        zIndex: 1,\n        selectors: {\n          ':after': {\n            backgroundColor: theme.palette.neutralLighter,\n            width: '1px',\n            content: '\"\"',\n            position: 'absolute',\n            top: '0',\n            bottom: '0',\n            left: '50%',\n            right: '0',\n            zIndex: -1,\n          },\n        },\n      },\n      !vertical && {\n        padding: '4px 0',\n        selectors: {\n          ':before': {\n            backgroundColor: theme.palette.neutralLighter,\n            height: '1px',\n            content: '\"\"',\n            display: 'block',\n            position: 'absolute',\n            top: '50%',\n            bottom: '0',\n            left: '0',\n            right: '0',\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      {\n        position: 'relative',\n        display: 'inline-block',\n        padding: '0 12px',\n        color: theme.semanticColors.bodyText,\n        background: theme.semanticColors.bodyBackground,\n      },\n      vertical && {\n        padding: '12px 0',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { classNamesFunction } from '../../Utilities';\nimport { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nconst getClassNames = classNamesFunction<ILabelStyleProps, ILabelStyles>({\n  // Label is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Label.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class LabelBase extends React.Component<ILabelProps, {}> {\n  public render(): JSX.Element {\n    const { as: RootType = 'label', children, className, disabled, styles, required, theme } = this.props;\n    const classNames = getClassNames(styles, {\n      className,\n      disabled,\n      required,\n      theme: theme!,\n    });\n    return (\n      <RootType {...getNativeProps(this.props, divProperties)} className={classNames.root}>\n        {children}\n      </RootType>\n    );\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LabelBase } from './Label.base';\nimport { getStyles } from './Label.styles';\nimport { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const Label: React.FunctionComponent<ILabelProps> = styled<ILabelProps, ILabelStyleProps, ILabelStyles>(\n  LabelBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Label',\n  },\n);\n","import { HighContrastSelector, FontWeights } from '../../Styling';\nimport { ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const getStyles = (props: ILabelStyleProps): ILabelStyles => {\n  const { theme, className, disabled, required } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const labelFontWeight = FontWeights.semibold;\n  const labelColor = semanticColors.bodyText;\n  const labelDisabledColor = semanticColors.disabledBodyText;\n  const labelRequiredStarColor = semanticColors.errorText;\n\n  return {\n    root: [\n      'ms-Label',\n      theme.fonts.medium,\n      {\n        fontWeight: labelFontWeight,\n        color: labelColor,\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        margin: 0,\n        display: 'block',\n        padding: '5px 0',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n      },\n      disabled && {\n        color: labelDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      required && {\n        selectors: {\n          '::after': {\n            content: `' *'`,\n            color: labelRequiredStarColor,\n            paddingRight: 12,\n          },\n        },\n      },\n      className,\n    ],\n  };\n};\n","import { __assign } from 'tslib';\nexport const assign = __assign;\n","import * as React from 'react';\nimport { mergeCss } from '@uifabric/merge-styles';\nimport { IStyle, ITheme } from '@uifabric/styling';\nimport { getRTL, memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  // tslint:disable-next-line:missing-optional-annotation\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    const numChildren = React.Children.count(children);\n    if (numChildren === 0) {\n      return slotType(props);\n    }\n\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  // tslint:disable-next-line:missing-optional-annotation\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return ((defaultFactory(ComponentType) as unknown) as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n","import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@uifabric/styling';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const result: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const useState = options.state;\n\n    if (useState) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...useState(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  result.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (result as ISlotCreator<TComponentProps, any>).create = createFactory(result, { defaultProp });\n  }\n\n  assign(result, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return result as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n","/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n","import { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // tslint:disable:deprecation\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  // tslint:enable:deprecation\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n","import { getGlobalClassNames } from '../../../Styling';\nimport { IStackItemComponent, IStackItemStyles, IStackItemStylesReturnType } from './StackItem.types';\n\nconst GlobalClassNames = {\n  root: 'ms-StackItem',\n};\n\nconst alignMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nexport const StackItemStyles: IStackItemComponent['styles'] = (props, theme, tokens): IStackItemStylesReturnType => {\n  const { grow, shrink, disableShrink, align, verticalFill, order, className } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        margin: tokens.margin,\n        height: verticalFill ? '100%' : 'auto',\n        width: 'auto',\n      },\n      grow && { flexGrow: grow === true ? 1 : grow },\n      (disableShrink || (!grow && !shrink)) && {\n        flexShrink: 0,\n      },\n      shrink &&\n        !disableShrink && {\n          flexShrink: 1,\n        },\n      align && {\n        alignSelf: alignMap[align] || align,\n      },\n      order && {\n        order: order,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackItemStyles;\n};\n","/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../../Foundation';\nimport { IStackItemComponent, IStackItemProps, IStackItemSlots } from './StackItem.types';\nimport { StackItemStyles as styles } from './StackItem.styles';\n\nconst StackItemView: IStackItemComponent['view'] = props => {\n  const { children } = props;\n  if (React.Children.count(children) < 1) {\n    return null;\n  }\n\n  const Slots = getSlots<IStackItemProps, IStackItemSlots>(props, {\n    root: 'div',\n  });\n\n  return <Slots.root>{children}</Slots.root>;\n};\n\nexport const StackItem: React.FunctionComponent<IStackItemProps> = createComponent(StackItemView, {\n  displayName: 'StackItem',\n  styles,\n});\n\nexport default StackItem;\n","/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  getId,\n  inputProperties,\n  getNativeProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\nconst COMPONENT_NAME = 'Toggle';\n\nexport class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IToggleProps>,\n    prevState: Readonly<IToggleState>,\n  ): Partial<IToggleState> | null {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked,\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked',\n    });\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange',\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      label,\n      ariaLabel,\n      // tslint:disable:deprecation\n      onAriaLabel,\n      offAriaLabel,\n      // tslint:enable:deprecation\n      offText,\n      onText,\n      styles,\n      inlineLabel,\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n\n    const labelId = `${this._id}-label`;\n    const stateTextId = `${this._id}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label\n    // 4. onText (if checked) or offText (if not checked)\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      } else if (stateText) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const ariaRole = this.props.role ? this.props.role : 'switch';\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          <KeytipData\n            keytipProps={keytipProps}\n            ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n            disabled={disabled}\n          >\n            {(keytipAttributes: any): JSX.Element => (\n              <button\n                {...toggleNativeProps}\n                {...keytipAttributes}\n                className={classNames.pill}\n                disabled={disabled}\n                id={this._id}\n                type=\"button\"\n                role={ariaRole}\n                ref={this._toggleButton}\n                aria-disabled={disabled}\n                aria-checked={checked}\n                aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n                data-is-focusable={true}\n                onChange={this._noop}\n                onClick={this._onClick}\n                aria-labelledby={labelledById}\n              >\n                <span className={classNames.thumb} />\n              </button>\n            )}\n          </KeytipData>\n          {stateText && (\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    // tslint:disable-next-line:deprecation\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked,\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ToggleBase } from './Toggle.base';\nimport { getStyles } from './Toggle.styles';\nimport { IToggleProps, IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nexport const Toggle: React.FunctionComponent<IToggleProps> = styled<IToggleProps, IToggleStyleProps, IToggleStyles>(\n  ToggleBase,\n  getStyles,\n  undefined,\n  { scope: 'Toggle' },\n);\n","import { HighContrastSelector, getFocusStyle, FontWeights } from '../../Styling';\nimport { IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nconst DEFAULT_PILL_WIDTH = 40;\nconst DEFAULT_PILL_HEIGHT = 20;\nconst DEFAULT_THUMB_SIZE = 12;\n\nexport const getStyles = (props: IToggleStyleProps): IToggleStyles => {\n  const { theme, className, disabled, checked, inlineLabel, onOffMissing } = props;\n  const { semanticColors, palette } = theme;\n\n  // Tokens\n  const pillUncheckedBackground = semanticColors.bodyBackground;\n  const pillCheckedBackground = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const pillCheckedHoveredBackground = palette.themeDark;\n  const thumbUncheckedHoveredBackground = palette.neutralDark;\n  const pillCheckedDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbBackground = semanticColors.smallInputBorder;\n  const thumbCheckedBackground = semanticColors.inputForegroundChecked;\n  const thumbDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbCheckedDisabledBackground = semanticColors.disabledBackground;\n  const pillBorderColor = semanticColors.smallInputBorder;\n  const pillBorderHoveredColor = semanticColors.inputBorderHovered;\n  const pillBorderDisabledColor = semanticColors.disabledBodySubtext;\n  const textDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      'ms-Toggle',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      theme.fonts.medium,\n      {\n        marginBottom: '8px',\n      },\n      inlineLabel && {\n        display: 'flex',\n        alignItems: 'center',\n      },\n      className,\n    ],\n\n    label: [\n      'ms-Toggle-label',\n      disabled && {\n        color: textDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      inlineLabel &&\n        !onOffMissing && {\n          marginRight: 16,\n        },\n      onOffMissing &&\n        inlineLabel && {\n          order: 1,\n          marginLeft: 16,\n        },\n      inlineLabel && { wordBreak: 'break-all' },\n    ],\n\n    container: [\n      'ms-Toggle-innerContainer',\n      {\n        display: 'inline-flex',\n        position: 'relative',\n      },\n    ],\n\n    pill: [\n      'ms-Toggle-background',\n      getFocusStyle(theme, { inset: -3 }),\n      {\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        width: DEFAULT_PILL_WIDTH,\n        height: DEFAULT_PILL_HEIGHT,\n        borderRadius: DEFAULT_PILL_HEIGHT / 2,\n        transition: 'all 0.1s ease',\n        border: `1px solid ${pillBorderColor}`,\n        background: pillUncheckedBackground,\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 3px',\n      },\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover': [\n              {\n                borderColor: pillBorderHoveredColor,\n              },\n            ],\n            ':hover .ms-Toggle-thumb': [\n              {\n                backgroundColor: thumbUncheckedHoveredBackground,\n                selectors: {\n                  [HighContrastSelector]: {\n                    borderColor: 'Highlight',\n                  },\n                },\n              },\n            ],\n          },\n        },\n        checked && [\n          {\n            background: pillCheckedBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n          {\n            selectors: {\n              ':hover': [\n                {\n                  backgroundColor: pillCheckedHoveredBackground,\n                  borderColor: 'transparent',\n                  selectors: {\n                    [HighContrastSelector]: {\n                      backgroundColor: 'Highlight',\n                    },\n                  },\n                },\n              ],\n              [HighContrastSelector]: {\n                backgroundColor: 'WindowText',\n              },\n            },\n          },\n        ],\n      ],\n      disabled && [\n        {\n          cursor: 'default',\n        },\n        !checked && [\n          {\n            borderColor: pillBorderDisabledColor,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: pillCheckedDisabledBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n        ],\n      ],\n      !disabled && {\n        selectors: {\n          '&:hover': {\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n    ],\n\n    thumb: [\n      'ms-Toggle-thumb',\n      {\n        display: 'block',\n        width: DEFAULT_THUMB_SIZE,\n        height: DEFAULT_THUMB_SIZE,\n        borderRadius: '50%',\n        transition: 'all 0.1s ease',\n        backgroundColor: thumbBackground,\n        /* Border is added to handle high contrast mode for Firefox */\n        borderColor: 'transparent',\n        borderWidth: '.28em',\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n      },\n      !disabled &&\n        checked && [\n          {\n            backgroundColor: thumbCheckedBackground,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Window',\n                borderColor: 'Window',\n              },\n            },\n          },\n        ],\n      disabled && [\n        !checked && [\n          {\n            backgroundColor: thumbDisabledBackground,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: thumbCheckedDisabledBackground,\n          },\n        ],\n      ],\n    ],\n\n    text: [\n      'ms-Toggle-stateText',\n      {\n        selectors: {\n          // Workaround: make rules more specific than Label rules.\n          '&&': {\n            padding: '0',\n            margin: '0 8px',\n            userSelect: 'none',\n            fontWeight: FontWeights.regular,\n          },\n        },\n      },\n      disabled && {\n        selectors: {\n          '&&': {\n            color: textDisabledColor,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n};\n"],"sourceRoot":""}