{"version":3,"sources":["../../src/components/Spinner/Spinner.types.ts","../../src/DelayedRender.tsx","../../src/components/Spinner/Spinner.base.tsx","../../src/components/Spinner/Spinner.styles.tsx","../../src/components/Spinner/Spinner.tsx","../../src/components/TextField/TextField.base.tsx","../../src/controlled.ts","../../src/components/TextField/TextField.styles.tsx","../../src/components/TextField/TextField.ts"],"names":["SpinnerSize","SpinnerType","props","state","isRendered","componentDidMount","delay","this","_timeoutId","window","setTimeout","setState","componentWillUnmount","clearTimeout","render","only","children","defaultProps","getClassNames","classNamesFunction","type","size","ariaLabel","ariaLive","styles","label","theme","className","labelPosition","statusMessage","nativeProps","styleSize","undefined","large","medium","classNames","root","circle","role","DelayedRender","screenReaderText","GlobalClassNames","spinAnimation","memoize","transform","Spinner","styled","palette","display","flexDirection","alignItems","justifyContent","boxSizing","borderRadius","border","themeLight","borderTopColor","themePrimary","animationName","animationDuration","animationIterationCount","animationTimingFunction","selectors","xSmall","width","height","small","fonts","color","margin","textAlign","scope","_textElement","_onFocus","ev","onFocus","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","required","labelStyles","_classNames","subComponentStyles","Label","htmlFor","_id","disabled","id","_labelId","_onRenderDescription","description","_onInputChange","event","isSameValue","target","_lastChangeValue","persist","prevState","prevValue","_getValue","_isControlled","uncontrolledValue","onChange","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","COMPONENT_NAME","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","_adjustInputHeight","validateOnLoad","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","multiline","focus","setSelectionRange","_shouldValidateAllChanges","borderless","iconProps","inputClassName","underlined","prefix","resizable","suffix","autoAdjustHeight","onRenderPrefix","onRenderSuffix","onRenderLabel","onRenderDescription","_errorMessage","focused","hasLabel","hasErrorMessage","hasIcon","wrapper","fieldGroup","_onRenderPrefix","_renderTextArea","_renderInput","Icon","icon","_onRenderSuffix","_isDescriptionAvailable","current","blur","select","setSelectionStart","setSelectionEnd","_hasWarnedNullValue","warn","valueProp","style","paddingBottom","textAreaProps","ariaLabelledBy","ref","onInput","field","readOnly","inputProps","_latestValidateValue","onGetErrorMessage","result","then","_notifyAfterValidate","onNotifyValidationResult","textField","scrollHeight","globalClassNames","unresizable","active","getLabelStyles","neutralTertiary","fontSize","marginRight","paddingLeft","paddingRight","lineHeight","TextField","semanticColors","effects","fieldPrefixSuffix","background","disabledBackground","disabledText","inputPlaceholderText","padding","whiteSpace","flexShrink","placeholderStyles","opacity","disabledPlaceholderStyles","position","borderBottom","errorText","inputBorder","borderBottomColor","borderColor","inputBorderHovered","inputFocusBorderAlt","roundedCorner2","inputBackground","cursor","minHeight","flex","backgroundColor","content","top","right","inputText","minWidth","textOverflow","outline","resize","flexGrow","paddingTop","overflow","pointerEvents","bottom","bodySubtext","slideDownIn20"],"mappings":"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","file":"static/js/7.18ba070b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize` instead.\n   * @deprecated Use `SpinnerSize` instead.\n   */\n  // tslint:disable-next-line:deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render. \\{ extraSmall, small, medium, large \\}\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * @defaultvalue bottom\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\n * @deprecated Use `SpinnerSize` instead.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.medium` instead.\n   * @deprecated Use `SpinnerSize.medium` instead.\n   */\n  normal = 0,\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.large` instead.\n   * @deprecated Use `SpinnerSize.large` instead.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// tslint:disable-next-line:deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // tslint:disable-next-line:deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // tslint:disable-next-line:deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { ISpinnerStyleProps, ISpinnerStyles, SpinnerSize } from './Spinner.types';\nimport { hiddenContentStyle, keyframes, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused } = this.state;\n    const errorMessage = this._errorMessage;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={this._classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={this._classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={this._classNames.icon} {...iconProps} />}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={this._classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={this._classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <input\n        type={'text'}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import {\n  AnimationClassNames,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  IStyle,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n} from '../../Styling';\nimport { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon && {\n        paddingRight: 24,\n      },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\nimport { getStyles } from './TextField.styles';\nexport { ITextField } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n"],"sourceRoot":""}