{"version":3,"sources":["../../src/components/Button/PrimaryButton/PrimaryButton.tsx","../../src/utilities/selectableOption/SelectableOption.types.ts","../../src/components/Checkbox/Checkbox.base.tsx","../../src/components/Checkbox/Checkbox.styles.ts","../../src/components/Checkbox/Checkbox.tsx","../../src/components/Button/CommandButton/CommandButton.tsx","../../src/components/Dropdown/utilities/DropdownSizePosCache.ts","../../src/utilities/selectableOption/SelectableOption.ts","../../src/components/Dropdown/Dropdown.base.tsx","../../src/safeRequestAnimationFrame.ts","../../src/components/Dropdown/Dropdown.styles.ts","../../src/components/Dropdown/Dropdown.ts"],"names":["render","this","props","primary","onRenderDescription","PrimaryButton","SelectableOptionMenuItemType","getClassNames","classNamesFunction","context","_checkBox","_onFocus","ev","inputProps","onFocus","_onBlur","onBlur","_onChange","onChange","isChecked","isIndeterminate","undefined","indeterminate","setState","checked","_onRenderLabel","label","title","className","_classNames","text","initializeComponentRef","_id","id","getId","state","defaultChecked","defaultIndeterminate","getDerivedStateFromProps","nextProps","prevState","stateUpdate","Object","keys","length","disabled","name","boxSide","theme","ariaLabel","ariaLabelledBy","ariaDescribedBy","styles","onRenderLabel","checkmarkIconProps","ariaPositionInSet","ariaSetSize","keytipProps","reversed","isUsingCustomLabelRender","KeytipData","keytipAttributes","root","type","input","ref","htmlFor","checkbox","Icon","iconName","checkmark","focus","current","defaultProps","GlobalClassNames","Checkbox","styled","semanticColors","effects","palette","fonts","classNames","checkmarkFontColor","inputForegroundChecked","checkmarkFontColorHovered","neutralSecondary","checkboxBorderColor","neutralPrimary","checkboxBorderIndeterminateColor","inputBackgroundChecked","checkboxBorderColorChecked","checkboxBorderColorDisabled","disabledBodySubtext","checkboxBorderHoveredColor","inputBorderHovered","checkboxBorderIndeterminateHoveredColor","inputBackgroundCheckedHovered","checkboxBackgroundChecked","checkboxBackgroundCheckedHovered","checkboxBorderColorCheckedHovered","checkboxHoveredTextColor","inputTextHovered","checkboxBackgroundDisabledChecked","checkboxTextColor","bodyText","checkboxTextColorDisabled","disabledText","indeterminateDotStyles","content","borderRadius","roundedCorner2","position","width","height","top","left","boxSizing","borderWidth","borderStyle","borderColor","transitionProperty","transitionDuration","transitionTimingFunction","selectors","display","color","opacity","background","outline","outlineOffset","medium","alignItems","cursor","userSelect","flexDirection","justifyContent","right","bottom","pointerEvents","flexShrink","border","overflow","marginLeft","marginRight","MsHighContrastAdjust","fontSize","lineHeight","scope","CommandButton","_size","updateOptions","options","displayOnlyOptionsCache","size","i","itemType","Divider","Header","push","hidden","_displayOnlyOptionsCache","positionInSet","index","offset","Error","getAllSelectedOptions","selectedIndices","selectedOptions","option","_host","_focusZone","_dropDown","_scrollIdleDelay","_sizePosCache","_requestAnimationFrame","component","activeTimeouts","cb","Set","extendComponent","componentWillUnmount","forEach","cancelAnimationFrame","timeoutId","requestAnimationFrame","delete","add","event","multiSelect","onChanged","changedOpt","selected","target","_onRenderTitle","items","multiSelectDelimiter","displayTxt","map","join","_onRenderPlaceholder","_placeholder","_onRenderContainer","calloutProps","panelProps","responsiveMode","dropdownWidth","isSmall","panelStyles","subComponentStyles","panel","Panel","isOpen","isLightDismiss","onDismiss","_onDismiss","hasCloseButton","_renderFocusableList","Callout","isBeakVisible","gapSpace","doNotLayer","directionalHintFixed","directionalHint","DirectionalHint","bottomLeftEdge","callout","onScroll","_onScroll","onPositioned","_onPositioned","calloutWidth","clientWidth","_onRenderCaretDown","caretDown","_onRenderList","onRenderItem","queue","renderedList","emptyQueue","newGroup","role","key","item","_onRenderItem","placeRenderedOptionIntoQueue","_renderSeparator","_renderHeader","_renderOption","onRenderOption","isItemSelected","indexOf","itemClassName","dropdownItemHidden","dropdownItemSelectedAndDisabled","dropdownItemSelected","dropdownItemDisabled","dropdownItem","multiSelectItemStyles","multiSelectItem","_listId","_onItemClick","onMouseEnter","_onItemMouseEnter","bind","onMouseLeave","_onMouseItemLeave","onMouseMove","_onItemMouseMove","_onRenderItemLabel","optionSetSize","onClick","_onRenderOption","dropdownOptionText","positions","element","getDocument","getElementById","focusElement","calloutRenderEdge","targetEdge","setSelectedIndex","_isScrollIdle","_scrollIdleTimeoutId","clearTimeout","setTimeout","_shouldIgnoreMouseEvent","setActive","e","_onDropdownBlur","_isDisabled","hasFocus","_onDropdownKeyDown","_lastKeyDownWasAltOrMeta","_isAltOrMeta","onKeyDown","defaultPrevented","newIndex","selectedIndex","containsExpandCollapseModifier","altKey","metaKey","which","KeyCodes","enter","escape","up","_moveIndex","down","stopPropagation","preventDefault","home","end","space","_onDropdownKeyUp","shouldHandleKey","_shouldHandleKeyUp","onKeyUp","_onZoneKeyDown","elementToFocus","lastChild","pageUp","pageDown","firstChild","tab","_onZoneKeyUp","_onDropdownClick","_shouldOpenOnFocus","_isFocusedByClick","_onDropdownMouseDown","isDisabled","required","labelStyles","Label","_labelId","selectedKey","selectedKeys","defaultSelectedKey","defaultSelectedKeys","_optionId","_getSelectedIndexes","UNSAFE_componentWillReceiveProps","newProps","selectedKeyProp","didOptionsChange","componentDidUpdate","prevProps","_gotMouseMove","errorMessage","onRenderTitle","onRenderContainer","onRenderCaretDown","onRenderPlaceholder","onRenderPlaceHolder","divProps","errorMessageId","ariaActiveDescendant","ariaAttrs","childRole","ariaPosInSet","ariaSelected","propStyles","hasError","hasLabel","isRenderingPlaceholder","panelClassName","calloutClassName","hasErrorMessage","tabIndex","dropdown","onMouseDown","caretDownWrapper","shouldOpenOnFocus","notifyOnReselect","newIndexes","Math","max","min","_copyArray","splice","persist","placeholder","placeHolder","array","newArray","stepValue","stepCounter","onRenderList","dropdownItemsWrapper","FocusZone","direction","vertical","dropdownItems","dropdownDivider","dropdownItemHeader","currentTarget","targetElement","document","activeElement","_getAllSelectedIndices","_getSelectedIndex","Array","isArray","filter","isSelected","alt","keyPressIsAltOrMetaAlone","openOnKeyboardFocus","DropdownBase","withResponsiveMode","titleIsPlaceHolder","titleHasError","highContrastAdjustMixin","replace","highContrastItemAndTitleStateMixin","backgroundColor","highContrastBorderState","MinimumScreenSelector","Dropdown","globalClassnames","rootHoverFocusActiveSelectorNeutralDarkMixin","menuItemTextHovered","rootHoverFocusActiveSelectorNeutralPrimaryMixin","menuItemText","borderColorError","errorText","dropdownItemStyle","padding","minHeight","wordWrap","overflowWrap","textAlign","selectedItemBackgroundColor","menuItemBackgroundPressed","itemSelectors","menuItemBackgroundHovered","menuBackground","titleOpenBorderRadius","calloutOpenBorderRadius","focusBorder","themePrimary","inputBackground","inputBorder","DROPDOWN_HEIGHT","whiteSpace","textOverflow","inputPlaceholderText","disabledBackground","small","paddingTop","boxShadow","elevation8","bodyDivider","minWidth","maxWidth","margin","fontWeight","semibold","menuHeader","alignSelf","main","contentInner"],"mappings":"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","file":"static/js/1.413989fe.chunk.js","sourcesContent":["import * as React from 'react';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { DefaultButton } from '../DefaultButton/DefaultButton';\nimport { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('PrimaryButton', ['theme', 'styles'], true)\nexport class PrimaryButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    return <DefaultButton {...this.props} primary={true} onRenderDescription={nullRender} />;\n  }\n}\n","export interface ISelectableOption {\r\n  /**\r\n   * Arbitrary string associated with this option.\r\n   */\r\n  key: string | number;\r\n\r\n  /**\r\n   * ID attribute associated with this option\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Text to render for this option\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Title attribute (built in tooltip) for a given option.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * Text to render for this option\r\n   */\r\n  itemType?: SelectableOptionMenuItemType;\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n\r\n  /**\r\n   * The aria label for the dropdown option. If not present, the `text` will be used.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /** If option is selected. */\r\n  selected?: boolean;\r\n\r\n  /**\r\n   * Whether the option is disabled\r\n   * @defaultvalue false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Defines whether the option is hidden or not.\r\n   * @defaultvalue false\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * Data available to custom onRender functions.\r\n   */\r\n  data?: any;\r\n}\r\n\r\nexport enum SelectableOptionMenuItemType {\r\n  Normal = 0,\r\n  Divider = 1,\r\n  Header = 2,\r\n}\r\n","import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start',\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<ICheckboxProps>,\n    prevState: Readonly<ICheckboxState>,\n  ): ICheckboxState | null {\n    const stateUpdate: Partial<ICheckboxState> = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate),\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      className,\n      disabled,\n      inputProps,\n      name,\n      boxSide,\n      theme,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      keytipProps,\n      title,\n      label,\n    } = this.props;\n\n    const { isChecked, isIndeterminate } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel,\n    });\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div className={this._classNames.root} title={title}>\n            <FocusRects />\n            <input\n              type=\"checkbox\"\n              {...inputProps}\n              data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n              checked={isChecked}\n              disabled={disabled}\n              className={this._classNames.input}\n              ref={this._checkBox}\n              name={name}\n              id={this._id}\n              title={title}\n              onChange={this._onChange}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n              aria-disabled={disabled}\n              aria-label={ariaLabel || label}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n              aria-posinset={ariaPositionInSet}\n              aria-setsize={ariaSetSize}\n              aria-checked={isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false'}\n            />\n            <label className={this._classNames.label} htmlFor={this._id}>\n              <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n                <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n              </div>\n              {onRenderLabel(this.props, this._onRenderLabel)}\n            </label>\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public get indeterminate(): boolean {\n    return !!this.state.isIndeterminate;\n  }\n\n  public get checked(): boolean {\n    return !!this.state.isChecked;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!isIndeterminate) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    } else {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      if (onChange) {\n        onChange(ev, isChecked);\n      }\n      if (this.props.indeterminate === undefined) {\n        this.setState({ isIndeterminate: false });\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label, title } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text} title={title}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n","import { ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\r\nimport {\r\n  HighContrastSelector,\r\n  getGlobalClassNames,\r\n  getEdgeChromiumNoHighContrastAdjustSelector,\r\n  IStyle,\r\n} from '../../Styling';\r\nimport { IsFocusVisibleClassName } from '../../Utilities';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-Checkbox',\r\n  label: 'ms-Checkbox-label',\r\n  checkbox: 'ms-Checkbox-checkbox',\r\n  checkmark: 'ms-Checkbox-checkmark',\r\n  text: 'ms-Checkbox-text',\r\n};\r\n\r\nconst MS_CHECKBOX_LABEL_SIZE = '20px';\r\nconst MS_CHECKBOX_TRANSITION_DURATION = '200ms';\r\nconst MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\r\n\r\nexport const getStyles = (props: ICheckboxStyleProps): ICheckboxStyles => {\r\n  const { className, theme, reversed, checked, disabled, isUsingCustomLabelRender, indeterminate } = props;\r\n  const { semanticColors, effects, palette, fonts } = theme;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  const checkmarkFontColor = semanticColors.inputForegroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\r\n  const checkmarkFontColorHovered = palette.neutralSecondary;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\r\n  const checkboxBorderColor = palette.neutralPrimary;\r\n  const checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\r\n  const checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\r\n  const checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\r\n  // semanticColors.inputBackgroundCheckedHovered\r\n  const checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxHoveredTextColor = semanticColors.inputTextHovered;\r\n  const checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\r\n  const checkboxTextColor = semanticColors.bodyText;\r\n  const checkboxTextColorDisabled = semanticColors.disabledText;\r\n\r\n  const indeterminateDotStyles: IStyle = [\r\n    {\r\n      content: '\"\"',\r\n      borderRadius: effects.roundedCorner2,\r\n      position: 'absolute',\r\n      width: 10,\r\n      height: 10,\r\n      top: 4,\r\n      left: 4,\r\n      boxSizing: 'border-box',\r\n      borderWidth: 5,\r\n      borderStyle: 'solid',\r\n      borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\r\n      transitionProperty: 'border-width, border, border-color',\r\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n      selectors: {\r\n        [HighContrastSelector]: {\r\n          borderColor: 'WindowText',\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  return {\r\n    root: [\r\n      classNames.root,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n      },\r\n      reversed && 'reversed',\r\n      checked && 'is-checked',\r\n      !disabled && 'is-enabled',\r\n      disabled && 'is-disabled',\r\n      !disabled && [\r\n        !checked && {\r\n          selectors: {\r\n            [`:hover .${classNames.checkbox}`]: {\r\n              borderColor: checkboxBorderHoveredColor,\r\n              selectors: {\r\n                [HighContrastSelector]: {\r\n                  borderColor: 'Highlight',\r\n                },\r\n              },\r\n            },\r\n            [`:focus .${classNames.checkbox}`]: { borderColor: checkboxBorderHoveredColor },\r\n            [`:hover .${classNames.checkmark}`]: {\r\n              color: checkmarkFontColorHovered,\r\n              opacity: '1',\r\n              selectors: {\r\n                [HighContrastSelector]: {\r\n                  color: 'Highlight',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        checked &&\r\n          !indeterminate && {\r\n            selectors: {\r\n              [`:hover .${classNames.checkbox}`]: {\r\n                background: checkboxBackgroundCheckedHovered,\r\n                borderColor: checkboxBorderColorCheckedHovered,\r\n              },\r\n              [`:focus .${classNames.checkbox}`]: {\r\n                background: checkboxBackgroundCheckedHovered,\r\n                borderColor: checkboxBorderColorCheckedHovered,\r\n              },\r\n              [HighContrastSelector]: {\r\n                selectors: {\r\n                  [`:hover .${classNames.checkbox}`]: {\r\n                    background: 'Window',\r\n                    borderColor: 'Highlight',\r\n                  },\r\n                  [`:focus .${classNames.checkbox}`]: {\r\n                    background: 'Highlight',\r\n                  },\r\n                  [`:focus:hover .${classNames.checkbox}`]: {\r\n                    background: 'Highlight',\r\n                  },\r\n                  [`:focus:hover .${classNames.checkmark}`]: {\r\n                    color: 'Window',\r\n                  },\r\n                  [`:hover .${classNames.checkmark}`]: {\r\n                    color: 'Highlight',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        indeterminate && {\r\n          selectors: {\r\n            [`:hover .${classNames.checkbox}, :hover .${classNames.checkbox}:after`]: {\r\n              borderColor: checkboxBorderIndeterminateHoveredColor,\r\n              selectors: {\r\n                [HighContrastSelector]: {\r\n                  borderColor: 'WindowText',\r\n                },\r\n              },\r\n            },\r\n            [`:focus .${classNames.checkbox}`]: {\r\n              borderColor: checkboxBorderIndeterminateHoveredColor,\r\n            },\r\n            [`:hover .${classNames.checkmark}`]: {\r\n              opacity: '0',\r\n            },\r\n          },\r\n        },\r\n        {\r\n          selectors: {\r\n            [`:hover .${classNames.text}, :focus .${classNames.text}`]: {\r\n              color: checkboxHoveredTextColor,\r\n              selectors: {\r\n                [HighContrastSelector]: {\r\n                  color: disabled ? 'GrayText' : 'WindowText',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      className,\r\n    ],\r\n    input: {\r\n      position: 'absolute',\r\n      background: 'none',\r\n\r\n      opacity: 0,\r\n      selectors: {\r\n        [`.${IsFocusVisibleClassName} &:focus + label::before`]: {\r\n          outline: '1px solid ' + theme.palette.neutralSecondary,\r\n          outlineOffset: '2px',\r\n          selectors: {\r\n            [HighContrastSelector]: {\r\n              outline: '1px solid ActiveBorder',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    label: [\r\n      classNames.label,\r\n      theme.fonts.medium,\r\n      {\r\n        display: 'flex',\r\n        alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\r\n        cursor: disabled ? 'default' : 'pointer',\r\n        position: 'relative',\r\n        userSelect: 'none',\r\n      },\r\n      reversed && {\r\n        flexDirection: 'row-reverse',\r\n        justifyContent: 'flex-end',\r\n      },\r\n      {\r\n        selectors: {\r\n          '&::before': {\r\n            position: 'absolute',\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            content: '\"\"',\r\n            pointerEvents: 'none',\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    checkbox: [\r\n      classNames.checkbox,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: MS_CHECKBOX_LABEL_SIZE,\r\n        width: MS_CHECKBOX_LABEL_SIZE,\r\n        border: `1px solid ${checkboxBorderColor}`,\r\n        borderRadius: effects.roundedCorner2,\r\n        boxSizing: 'border-box',\r\n        transitionProperty: 'background, border, border-color',\r\n        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n\r\n        /* in case the icon is bigger than the box */\r\n        overflow: 'hidden',\r\n        selectors: {\r\n          ':after': indeterminate ? indeterminateDotStyles : null,\r\n          [HighContrastSelector]: {\r\n            borderColor: 'WindowText',\r\n          },\r\n          ...getEdgeChromiumNoHighContrastAdjustSelector(),\r\n        },\r\n      },\r\n      indeterminate && {\r\n        borderColor: checkboxBorderIndeterminateColor,\r\n      },\r\n      !reversed\r\n        ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\r\n          // is used, there will be only a 4px margin from checkbox to label. The label by default would have\r\n          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\r\n          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\r\n          {\r\n            marginRight: 4,\r\n          }\r\n        : {\r\n            marginLeft: 4,\r\n          },\r\n      !disabled &&\r\n        !indeterminate &&\r\n        checked && {\r\n          background: checkboxBackgroundChecked,\r\n          borderColor: checkboxBorderColorChecked,\r\n          selectors: {\r\n            [HighContrastSelector]: {\r\n              background: 'Highlight',\r\n              borderColor: 'Highlight',\r\n            },\r\n          },\r\n        },\r\n      disabled && {\r\n        borderColor: checkboxBorderColorDisabled,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            borderColor: 'GrayText',\r\n          },\r\n        },\r\n      },\r\n      checked &&\r\n        disabled && {\r\n          background: checkboxBackgroundDisabledChecked,\r\n          borderColor: checkboxBorderColorDisabled,\r\n          selectors: {\r\n            [HighContrastSelector]: {\r\n              background: 'Window',\r\n            },\r\n          },\r\n        },\r\n    ],\r\n    checkmark: [\r\n      classNames.checkmark,\r\n      {\r\n        opacity: checked ? '1' : '0',\r\n        color: checkmarkFontColor,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: disabled ? 'GrayText' : 'Window',\r\n            MsHighContrastAdjust: 'none',\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\r\n        fontSize: fonts.medium.fontSize,\r\n        lineHeight: '20px',\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: disabled ? 'GrayText' : 'WindowText',\r\n          },\r\n          ...getEdgeChromiumNoHighContrastAdjustSelector(),\r\n        },\r\n      },\r\n      !reversed\r\n        ? {\r\n            marginLeft: 4,\r\n          }\r\n        : {\r\n            marginRight: 4,\r\n          },\r\n    ],\r\n  };\r\n};\r\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CheckboxBase } from './Checkbox.base';\nimport { getStyles } from './Checkbox.styles';\nimport { ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\n\nexport const Checkbox: React.FunctionComponent<ICheckboxProps> = styled<\n  ICheckboxProps,\n  ICheckboxStyleProps,\n  ICheckboxStyles\n>(CheckboxBase, getStyles, undefined, { scope: 'Checkbox' });\n","import { ActionButton } from '../ActionButton/ActionButton';\n\n/**\n * {@docCategory Button}\n */\nexport const CommandButton = ActionButton;\n","import { IDropdownOption, DropdownMenuItemType } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _displayOnlyOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    return index - offset + 1;\n  }\n}\n","import { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\n\nexport function getAllSelectedOptions(options: ISelectableOption[], selectedIndices: number[]): ISelectableOption[] {\n  const selectedOptions: ISelectableOption[] = [];\n  for (const index of selectedIndices) {\n    const option = options[index];\n\n    if (option) {\n      selectedOptions.push(option);\n    }\n  }\n\n  return selectedOptions;\n}\n","declare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): number;\n\nimport * as React from 'react';\nimport {\n  IStyleFunctionOrObject,\n  KeyCodes,\n  classNamesFunction,\n  divProperties,\n  findIndex,\n  getDocument,\n  getFirstFocusable,\n  getId,\n  getLastFocusable,\n  getNativeProps,\n  initializeComponentRef,\n  isIOS,\n  isMac,\n  mergeAriaAttributeValues,\n  safeRequestAnimationFrame,\n  warn,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox, ICheckboxStyleProps, ICheckboxStyles } from '../../Checkbox';\nimport { CommandButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport {\n  DropdownMenuItemType,\n  IDropdownOption,\n  IDropdownProps,\n  IDropdownStyleProps,\n  IDropdownStyles,\n  IDropdown,\n} from './Dropdown.types';\nimport { DropdownSizePosCache } from './utilities/DropdownSizePosCache';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { ICalloutPositionedInfo, RectangleEdge } from '../../utilities/positioning';\nimport { Icon } from '../../Icon';\nimport { ILabelStyleProps, ILabelStyles, Label } from '../../Label';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\nimport { KeytipData } from '../../KeytipData';\nimport { Panel, IPanelStyleProps, IPanelStyles } from '../../Panel';\nimport { ResponsiveMode, withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport {\n  SelectableOptionMenuItemType,\n  getAllSelectedOptions,\n  ISelectableDroppableTextProps,\n} from '../../utilities/selectableOption/index';\n\nconst getClassNames = classNamesFunction<IDropdownStyleProps, IDropdownStyles>();\n\n/** Internal only props interface to support mixing in responsive mode */\nexport interface IDropdownInternalProps extends IDropdownProps, IWithResponsiveModeState {}\n\nexport interface IDropdownState {\n  isOpen: boolean;\n  selectedIndices: number[];\n  /** Whether the root dropdown element has focus. */\n  hasFocus: boolean;\n  calloutRenderEdge?: RectangleEdge;\n}\n\n@withResponsiveMode\nexport class DropdownBase extends React.Component<IDropdownInternalProps, IDropdownState> implements IDropdown {\n  public static defaultProps = {\n    options: [] as any[],\n  };\n\n  private _host = React.createRef<HTMLDivElement>();\n  private _focusZone = React.createRef<FocusZone>();\n  private _dropDown = React.createRef<HTMLDivElement>();\n  private _id: string;\n  private _labelId: string;\n  private _listId: string;\n  private _optionId: string;\n  private _isScrollIdle: boolean;\n  private readonly _scrollIdleDelay: number = 250 /* ms */;\n  private _scrollIdleTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n  private _sizePosCache: DropdownSizePosCache = new DropdownSizePosCache();\n  private _classNames: IProcessedStyleSet<IDropdownStyles>;\n  private _requestAnimationFrame = safeRequestAnimationFrame(this);\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n  /** Flag for tracking whether focus is triggered by click (alternatively triggered by keyboard nav) */\n  private _isFocusedByClick: boolean;\n\n  constructor(props: IDropdownProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const { multiSelect, selectedKey, selectedKeys, defaultSelectedKey, defaultSelectedKeys, options } = props;\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dropdown', props, {\n        isDisabled: 'disabled',\n        onChanged: 'onChange',\n        placeHolder: 'placeholder',\n        onRenderPlaceHolder: 'onRenderPlaceholder',\n      });\n\n      warnMutuallyExclusive('Dropdown', props, {\n        defaultSelectedKey: 'selectedKey',\n        defaultSelectedKeys: 'selectedKeys',\n        selectedKeys: 'selectedKey',\n      });\n\n      if (multiSelect) {\n        const warnMultiSelect = (prop: keyof IDropdownProps) =>\n          warn(`Dropdown property '${prop}' cannot be used when 'multiSelect' is true. Use '${prop}s' instead.`);\n        if (selectedKey !== undefined) {\n          warnMultiSelect('selectedKey');\n        }\n        if (defaultSelectedKey !== undefined) {\n          warnMultiSelect('defaultSelectedKey');\n        }\n      } else {\n        const warnNotMultiSelect = (prop: keyof IDropdownProps) =>\n          warn(`Dropdown property '${prop}s' cannot be used when 'multiSelect' is false/unset. Use '${prop}' instead.`);\n        if (selectedKeys !== undefined) {\n          warnNotMultiSelect('selectedKey');\n        }\n        if (defaultSelectedKeys !== undefined) {\n          warnNotMultiSelect('defaultSelectedKey');\n        }\n      }\n    }\n\n    this._id = props.id || getId('Dropdown');\n    this._labelId = this._id + '-label';\n    this._listId = this._id + '-list';\n    this._optionId = this._id + '-option';\n    this._isScrollIdle = true;\n\n    let selectedIndices: number[];\n\n    if (multiSelect) {\n      selectedIndices = this._getSelectedIndexes(\n        options,\n        defaultSelectedKeys !== undefined ? defaultSelectedKeys : selectedKeys,\n      );\n    } else {\n      selectedIndices = this._getSelectedIndexes(\n        options,\n        (defaultSelectedKey !== undefined ? defaultSelectedKey : selectedKey)!,\n      );\n    }\n\n    this._sizePosCache.updateOptions(options);\n\n    this.state = {\n      isOpen: false,\n      selectedIndices,\n      hasFocus: false,\n      calloutRenderEdge: undefined,\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IDropdownOption[] {\n    const { options } = this.props;\n    const { selectedIndices } = this.state;\n\n    return getAllSelectedOptions(options, selectedIndices);\n  }\n\n  public componentWillUnmount() {\n    clearTimeout(this._scrollIdleTimeoutId);\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IDropdownProps): void {\n    // In controlled component usage where selectedKey is provided, update the selectedIndex\n    // state if the key or options change.\n    let selectedKeyProp: 'defaultSelectedKeys' | 'selectedKeys' | 'defaultSelectedKey' | 'selectedKey';\n\n    // this does a shallow compare (assumes options are pure), for the purposes of determining whether\n    // defaultSelectedKey/defaultSelectedKeys are respected.\n    const didOptionsChange = newProps.options !== this.props.options;\n\n    if (newProps.multiSelect) {\n      if (didOptionsChange && newProps.defaultSelectedKeys !== undefined) {\n        selectedKeyProp = 'defaultSelectedKeys';\n      } else {\n        selectedKeyProp = 'selectedKeys';\n      }\n    } else {\n      if (didOptionsChange && newProps.defaultSelectedKey !== undefined) {\n        selectedKeyProp = 'defaultSelectedKey';\n      } else {\n        selectedKeyProp = 'selectedKey';\n      }\n    }\n\n    if (\n      newProps[selectedKeyProp] !== undefined &&\n      (newProps[selectedKeyProp] !== this.props[selectedKeyProp] || didOptionsChange)\n    ) {\n      this.setState({\n        selectedIndices: this._getSelectedIndexes(newProps.options, newProps[selectedKeyProp]),\n      });\n    }\n\n    if (\n      newProps.options !== this.props.options // preexisting code assumes purity of the options...\n    ) {\n      this._sizePosCache.updateOptions(newProps.options);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDropdownProps, prevState: IDropdownState) {\n    if (prevState.isOpen === true && this.state.isOpen === false) {\n      this._gotMouseMove = false;\n\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const id = this._id;\n\n    const props = this.props;\n    const {\n      className,\n      label,\n      options,\n      ariaLabel,\n      required,\n      errorMessage,\n      keytipProps,\n      styles: propStyles,\n      theme,\n      panelProps,\n      calloutProps,\n      multiSelect,\n      onRenderTitle = this._onRenderTitle,\n      onRenderContainer = this._onRenderContainer,\n      onRenderCaretDown = this._onRenderCaretDown,\n      onRenderLabel = this._onRenderLabel,\n    } = props;\n    const { isOpen, selectedIndices, calloutRenderEdge } = this.state;\n    // tslint:disable-next-line:deprecation\n    const onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._onRenderPlaceholder;\n\n    const selectedOptions = getAllSelectedOptions(options, selectedIndices);\n    const divProps = getNativeProps(props, divProperties);\n\n    const disabled = this._isDisabled();\n\n    const errorMessageId = id + '-errorMessage';\n    const ariaActiveDescendant = disabled\n      ? undefined\n      : isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0\n      ? this._listId + selectedIndices[0]\n      : undefined;\n\n    const ariaAttrs = multiSelect\n      ? {\n          role: 'button',\n        }\n      : // single select\n        {\n          role: 'listbox',\n          childRole: 'option',\n          ariaSetSize: this._sizePosCache.optionSetSize,\n          ariaPosInSet: this._sizePosCache.positionInSet(selectedIndices[0]),\n          ariaSelected: selectedIndices[0] === undefined ? undefined : true,\n        };\n\n    this._classNames = getClassNames(propStyles, {\n      theme,\n      className,\n      hasError: !!(errorMessage && errorMessage.length > 0),\n      hasLabel: !!label,\n      isOpen,\n      required,\n      disabled,\n      isRenderingPlaceholder: !selectedOptions.length,\n      panelClassName: !!panelProps ? panelProps.className : undefined,\n      calloutClassName: !!calloutProps ? calloutProps.className : undefined,\n      calloutRenderEdge: calloutRenderEdge,\n    });\n\n    const hasErrorMessage: boolean = !!errorMessage && errorMessage.length > 0;\n\n    return (\n      <div className={this._classNames.root}>\n        {onRenderLabel(this.props, this._onRenderLabel)}\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => (\n            <div\n              {...keytipAttributes}\n              data-is-focusable={!disabled}\n              ref={this._dropDown}\n              id={id}\n              tabIndex={disabled ? -1 : 0}\n              role={ariaAttrs.role}\n              aria-haspopup=\"listbox\"\n              aria-expanded={isOpen ? 'true' : 'false'}\n              aria-label={ariaLabel}\n              aria-labelledby={\n                label && !ariaLabel ? mergeAriaAttributeValues(this._labelId, this._optionId) : undefined\n              }\n              aria-describedby={mergeAriaAttributeValues(\n                keytipAttributes['aria-describedby'],\n                hasErrorMessage ? this._id + '-errorMessage' : undefined,\n              )}\n              aria-activedescendant={ariaActiveDescendant}\n              aria-required={required}\n              aria-disabled={disabled}\n              aria-owns={isOpen ? this._listId : undefined}\n              {...divProps}\n              className={this._classNames.dropdown}\n              onBlur={this._onDropdownBlur}\n              onKeyDown={this._onDropdownKeyDown}\n              onKeyUp={this._onDropdownKeyUp}\n              onClick={this._onDropdownClick}\n              onMouseDown={this._onDropdownMouseDown}\n              onFocus={this._onFocus}\n            >\n              <span\n                id={this._optionId}\n                className={this._classNames.title}\n                aria-live=\"polite\"\n                aria-atomic={true}\n                aria-invalid={hasErrorMessage}\n                role={ariaAttrs.childRole}\n                aria-setsize={ariaAttrs.ariaSetSize}\n                aria-posinset={ariaAttrs.ariaPosInSet}\n                aria-selected={ariaAttrs.ariaSelected}\n              >\n                {// If option is selected render title, otherwise render the placeholder text\n                selectedOptions.length\n                  ? onRenderTitle(selectedOptions, this._onRenderTitle)\n                  : onRenderPlaceholder(props, this._onRenderPlaceholder)}\n              </span>\n              <span className={this._classNames.caretDownWrapper}>\n                {onRenderCaretDown(props, this._onRenderCaretDown)}\n              </span>\n            </div>\n          )}\n        </KeytipData>\n        {isOpen && onRenderContainer({ ...props, onDismiss: this._onDismiss }, this._onRenderContainer)}\n        {hasErrorMessage && (\n          <div role=\"alert\" id={errorMessageId} className={this._classNames.errorMessage}>\n            {errorMessage}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public focus(shouldOpenOnFocus?: boolean): void {\n    if (this._dropDown.current) {\n      this._dropDown.current.focus();\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true,\n        });\n      }\n    }\n  }\n\n  public setSelectedIndex(event: React.FormEvent<HTMLDivElement>, index: number): void {\n    const { options, selectedKey, selectedKeys, multiSelect, notifyOnReselect } = this.props;\n    const { selectedIndices = [] } = this.state;\n    const checked: boolean = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;\n    let newIndexes: number[] = [];\n\n    index = Math.max(0, Math.min(options.length - 1, index));\n\n    // If this is a controlled component then no state change should take place.\n    if (selectedKey !== undefined || selectedKeys !== undefined) {\n      this._onChange(event, options, index, checked, multiSelect);\n      return;\n    }\n\n    if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {\n      return;\n    } else if (multiSelect) {\n      newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];\n      if (checked) {\n        const position = newIndexes.indexOf(index);\n        if (position > -1) {\n          // unchecked the current one\n          newIndexes.splice(position, 1);\n        }\n      } else {\n        // add the new selected index into the existing one\n        newIndexes.push(index);\n      }\n    } else {\n      // Set the selected option if this is an uncontrolled component\n      newIndexes = [index];\n    }\n\n    event.persist();\n    // Call onChange after state is updated\n    this.setState(\n      {\n        selectedIndices: newIndexes,\n      },\n      () => {\n        this._onChange(event, options, index, checked, multiSelect);\n      },\n    );\n  }\n\n  private _onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    options: IDropdownOption[],\n    index: number,\n    checked?: boolean,\n    multiSelect?: boolean,\n  ) => {\n    // tslint:disable-next-line:deprecation\n    const { onChange, onChanged } = this.props;\n    if (onChange || onChanged) {\n      // for single-select, option passed in will always be selected.\n      // for multi-select, flip the checked value\n      const changedOpt = multiSelect ? { ...options[index], selected: !checked } : options[index];\n\n      onChange && onChange({ ...event, target: this._dropDown.current as EventTarget }, changedOpt, index);\n      onChanged && onChanged(changedOpt, index);\n    }\n  };\n\n  /** Get either props.placeholder (new name) or props.placeHolder (old name) */\n  private get _placeholder(): string | undefined {\n    // tslint:disable-next-line:deprecation\n    return this.props.placeholder || this.props.placeHolder;\n  }\n\n  private _copyArray(array: any[]): any[] {\n    const newArray = [];\n    for (const element of array) {\n      newArray.push(element);\n    }\n    return newArray;\n  }\n\n  /**\n   * Finds the next valid Dropdown option and sets the selected index to it.\n   * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\n   * @param index - Index of where the search should start\n   * @param selectedIndex - The selectedIndex Dropdown's state\n   * @returns The next valid dropdown option's index\n   */\n  private _moveIndex(\n    event: React.FormEvent<HTMLDivElement>,\n    stepValue: number,\n    index: number,\n    selectedIndex: number,\n  ): number {\n    const { options } = this.props;\n    // Return selectedIndex if nothing has changed or options is empty\n    if (selectedIndex === index || options.length === 0) {\n      return selectedIndex;\n    }\n\n    // If the user is pressing the up or down key we want to make\n    // sure that the dropdown cycles through the options without\n    // causing the screen to scroll. In _onDropdownKeyDown\n    // at the very end is a check to see if newIndex !== selectedIndex.\n    // If the index is less than 0 and we set it back to 0, then\n    // newIndex will equal selectedIndex and not stop the action\n    // of the key press happening and vice versa for indexes greater\n    // than or equal to the options length.\n    if (index >= options.length) {\n      index = 0;\n    } else if (index < 0) {\n      index = options.length - 1;\n    }\n\n    let stepCounter = 0;\n    // If current index is a header or divider, or disabled, increment by step\n    while (\n      options[index].itemType === DropdownMenuItemType.Header ||\n      options[index].itemType === DropdownMenuItemType.Divider ||\n      options[index].disabled\n    ) {\n      // If stepCounter exceeds length of options, then return selectedIndex (-1)\n      if (stepCounter >= options.length) {\n        return selectedIndex;\n      }\n      // If index + stepValue is out of bounds, wrap around\n      if (index + stepValue < 0) {\n        index = options.length;\n      } else if (index + stepValue >= options.length) {\n        index = -1;\n      }\n\n      index = index + stepValue;\n      stepCounter++;\n    }\n\n    this.setSelectedIndex(event, index);\n    return index;\n  }\n\n  /** Render text in dropdown input */\n  private _onRenderTitle = (items: IDropdownOption[]): JSX.Element => {\n    const { multiSelectDelimiter = ', ' } = this.props;\n\n    const displayTxt = items.map(i => i.text).join(multiSelectDelimiter);\n    return <>{displayTxt}</>;\n  };\n\n  /** Render placeholder text in dropdown input */\n  private _onRenderPlaceholder = (props: IDropdownProps): JSX.Element | null => {\n    if (!this._placeholder) {\n      return null;\n    }\n    return <>{this._placeholder}</>;\n  };\n\n  /** Render Callout or Panel container and pass in list */\n  private _onRenderContainer = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { calloutProps, panelProps } = props;\n    const { responsiveMode, dropdownWidth } = this.props;\n\n    const isSmall = responsiveMode! <= ResponsiveMode.medium;\n\n    const panelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.panel as IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>)\n      : undefined;\n\n    return isSmall ? (\n      <Panel\n        isOpen={true}\n        isLightDismiss={true}\n        onDismiss={this._onDismiss}\n        hasCloseButton={false}\n        styles={panelStyles}\n        {...panelProps}\n      >\n        {this._renderFocusableList(props)}\n      </Panel>\n    ) : (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHintFixed={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        {...calloutProps}\n        className={this._classNames.callout}\n        target={this._dropDown.current}\n        onDismiss={this._onDismiss}\n        onScroll={this._onScroll}\n        onPositioned={this._onPositioned}\n        calloutWidth={dropdownWidth || (this._dropDown.current ? this._dropDown.current.clientWidth : 0)}\n      >\n        {this._renderFocusableList(props)}\n      </Callout>\n    );\n  };\n\n  /** Render Caret Down Icon */\n  private _onRenderCaretDown = (props: IDropdownProps): JSX.Element => {\n    return <Icon className={this._classNames.caretDown} iconName=\"ChevronDown\" aria-hidden={true} />;\n  };\n\n  /** Wrap item list in a FocusZone */\n  private _renderFocusableList(props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element {\n    const { onRenderList = this._onRenderList, label, ariaLabel, multiSelect } = props;\n\n    return (\n      <div\n        className={this._classNames.dropdownItemsWrapper}\n        onKeyDown={this._onZoneKeyDown}\n        onKeyUp={this._onZoneKeyUp}\n        ref={this._host}\n        tabIndex={0}\n      >\n        <FocusZone\n          ref={this._focusZone}\n          direction={FocusZoneDirection.vertical}\n          id={this._listId}\n          className={this._classNames.dropdownItems}\n          role=\"listbox\"\n          aria-label={ariaLabel}\n          aria-labelledby={label && !ariaLabel ? this._labelId : undefined}\n          aria-multiselectable={multiSelect}\n        >\n          {onRenderList(props, this._onRenderList)}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  /** Render List of items */\n  private _onRenderList = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { onRenderItem = this._onRenderItem } = props;\n\n    let queue: { id?: string; items: JSX.Element[] } = { items: [] };\n    let renderedList: JSX.Element[] = [];\n\n    const emptyQueue = (): void => {\n      const newGroup = queue.id\n        ? [\n            <div role=\"group\" key={queue.id} aria-labelledby={queue.id}>\n              {queue.items}\n            </div>,\n          ]\n        : queue.items;\n\n      renderedList = [...renderedList, ...newGroup];\n      // Flush items and id\n      queue = { items: [] };\n    };\n\n    const placeRenderedOptionIntoQueue = (item: IDropdownOption, index: number) => {\n      /*\n        Case Header\n          empty queue if it's not already empty\n          ensure unique ID for header and set queue ID\n          push header into queue\n        Case Divider\n          push divider into queue if not first item\n          empty queue if not already empty\n        Default\n          push item into queue\n      */\n      switch (item.itemType) {\n        case SelectableOptionMenuItemType.Header:\n          queue.items.length > 0 && emptyQueue();\n\n          const id = this._id + item.key;\n          queue.items.push(onRenderItem({ id, ...item, index }, this._onRenderItem)!);\n          queue.id = id;\n          break;\n        case SelectableOptionMenuItemType.Divider:\n          index > 0 && queue.items.push(onRenderItem({ ...item, index }, this._onRenderItem)!);\n\n          queue.items.length > 0 && emptyQueue();\n          break;\n        default:\n          queue.items.push(onRenderItem({ ...item, index }, this._onRenderItem)!);\n      }\n    };\n\n    // Place options into the queue. Queue will be emptied anytime a Header or Divider is encountered\n    props.options.forEach((item: IDropdownOption, index: number) => {\n      placeRenderedOptionIntoQueue(item, index);\n    });\n\n    // Push remaining items into all renderedList\n    queue.items.length > 0 && emptyQueue();\n\n    return <>{renderedList}</>;\n  };\n\n  private _onRenderItem = (item: IDropdownOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  private _renderSeparator(item: IDropdownOption): JSX.Element | null {\n    const { index, key } = item;\n    if (index! > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.dropdownDivider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IDropdownOption): JSX.Element {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    const { key, id } = item;\n    return (\n      <div id={id} key={key} className={this._classNames.dropdownItemHeader}>\n        {onRenderOption(item, this._onRenderOption)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IDropdownOption): JSX.Element => {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    const { selectedIndices = [] } = this.state;\n    const isItemSelected =\n      item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false;\n\n    // select the right className based on the combination of selected/disabled\n    const itemClassName = item.hidden // predicate: item hidden\n      ? this._classNames.dropdownItemHidden\n      : isItemSelected && item.disabled === true // predicate: both selected and disabled\n      ? this._classNames.dropdownItemSelectedAndDisabled\n      : isItemSelected // predicate: selected only\n      ? this._classNames.dropdownItemSelected\n      : item.disabled === true // predicate: disabled only\n      ? this._classNames.dropdownItemDisabled\n      : this._classNames.dropdownItem;\n\n    const { title = item.text } = item;\n\n    const multiSelectItemStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.multiSelectItem as IStyleFunctionOrObject<\n          ICheckboxStyleProps,\n          ICheckboxStyles\n        >)\n      : undefined;\n\n    return !this.props.multiSelect ? (\n      <CommandButton\n        id={this._listId + item.index}\n        key={item.key}\n        data-index={item.index}\n        data-is-focusable={!item.disabled}\n        disabled={item.disabled}\n        className={itemClassName}\n        onClick={this._onItemClick(item)}\n        onMouseEnter={this._onItemMouseEnter.bind(this, item)}\n        onMouseLeave={this._onMouseItemLeave.bind(this, item)}\n        onMouseMove={this._onItemMouseMove.bind(this, item)}\n        role=\"option\"\n        aria-selected={isItemSelected ? 'true' : 'false'}\n        ariaLabel={item.ariaLabel}\n        title={title}\n        aria-posinset={this._sizePosCache.positionInSet(item.index)}\n        aria-setsize={this._sizePosCache.optionSetSize}\n      >\n        {onRenderOption(item, this._onRenderOption)}\n      </CommandButton>\n    ) : (\n      <Checkbox\n        id={this._listId + item.index}\n        key={item.key}\n        data-index={item.index}\n        data-is-focusable={!item.disabled}\n        disabled={item.disabled}\n        onChange={this._onItemClick(item)}\n        inputProps={{\n          onMouseEnter: this._onItemMouseEnter.bind(this, item),\n          onMouseLeave: this._onMouseItemLeave.bind(this, item),\n          onMouseMove: this._onItemMouseMove.bind(this, item),\n        }}\n        label={item.text}\n        title={title}\n        onRenderLabel={this._onRenderItemLabel.bind(this, item)}\n        className={itemClassName}\n        role=\"option\"\n        aria-selected={isItemSelected ? 'true' : 'false'}\n        checked={isItemSelected}\n        styles={multiSelectItemStyles}\n        ariaPositionInSet={this._sizePosCache.positionInSet(item.index)}\n        ariaSetSize={this._sizePosCache.optionSetSize}\n      />\n    );\n  };\n\n  /** Render content of item (i.e. text/icon inside of button) */\n  private _onRenderOption = (item: IDropdownOption): JSX.Element => {\n    return <span className={this._classNames.dropdownOptionText}>{item.text}</span>;\n  };\n\n  /** Render custom label for drop down item */\n  private _onRenderItemLabel = (item: IDropdownOption): JSX.Element | null => {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    return onRenderOption(item, this._onRenderOption);\n  };\n\n  private _onPositioned = (positions?: ICalloutPositionedInfo): void => {\n    if (this._focusZone.current) {\n      // Focusing an element can trigger a reflow. Making this wait until there is an animation\n      // frame can improve perf significantly.\n      this._requestAnimationFrame(() => {\n        const selectedIndices = this.state.selectedIndices;\n        if (this._focusZone.current) {\n          if (selectedIndices && selectedIndices[0] && !this.props.options[selectedIndices[0]].disabled) {\n            const element: HTMLElement | null = getDocument()!.getElementById(`${this._id}-list${selectedIndices[0]}`);\n            if (element) {\n              this._focusZone.current.focusElement(element);\n            }\n          } else {\n            this._focusZone.current.focus();\n          }\n        }\n      });\n    }\n\n    if (!this.state.calloutRenderEdge || this.state.calloutRenderEdge !== positions!.targetEdge) {\n      this.setState({\n        calloutRenderEdge: positions!.targetEdge,\n      });\n    }\n  };\n\n  private _onItemClick = (item: IDropdownOption): ((event: React.MouseEvent<HTMLDivElement>) => void) => {\n    return (event: React.MouseEvent<HTMLDivElement>): void => {\n      if (!item.disabled) {\n        this.setSelectedIndex(event, item.index!);\n        if (!this.props.multiSelect) {\n          // only close the callout when it's in single-select mode\n          this.setState({\n            isOpen: false,\n          });\n        }\n      }\n    };\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = (): void => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = setTimeout(() => {\n      this._isScrollIdle = true;\n    }, this._scrollIdleDelay);\n  };\n\n  private _onItemMouseEnter(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    const targetElement = ev.currentTarget as HTMLElement;\n    targetElement.focus();\n  }\n\n  private _onItemMouseMove(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    const targetElement = ev.currentTarget as HTMLElement;\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || document.activeElement === targetElement) {\n      return;\n    }\n\n    targetElement.focus();\n  }\n\n  private _onMouseItemLeave = (item: any, ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if (this._host.current) {\n      if ((this._host.current as any).setActive) {\n        try {\n          (this._host.current as any).setActive();\n        } catch (e) {\n          /* no-op */\n        }\n      } else {\n        this._host.current.focus();\n      }\n    }\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  private _onDismiss = (): void => {\n    this.setState({ isOpen: false });\n  };\n\n  /** Get all selected indexes for multi-select mode */\n  private _getSelectedIndexes(\n    options: IDropdownOption[],\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): number[] {\n    if (selectedKey === undefined) {\n      if (this.props.multiSelect) {\n        return this._getAllSelectedIndices(options);\n      }\n      const selectedIndex = this._getSelectedIndex(options, null);\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    } else if (!Array.isArray(selectedKey)) {\n      const selectedIndex = this._getSelectedIndex(options, selectedKey);\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    }\n\n    const selectedIndices: number[] = [];\n    for (const key of selectedKey) {\n      const selectedIndex = this._getSelectedIndex(options, key);\n      selectedIndex !== -1 && selectedIndices.push(selectedIndex);\n    }\n    return selectedIndices;\n  }\n\n  private _getAllSelectedIndices(options: IDropdownOption[]): number[] {\n    return options\n      .map((option: IDropdownOption, index: number) => (option.selected ? index : -1))\n      .filter(index => index !== -1);\n  }\n\n  private _getSelectedIndex(options: IDropdownOption[], selectedKey: string | number | null): number {\n    return findIndex(options, option => {\n      // tslint:disable-next-line:triple-equals\n      if (selectedKey != null) {\n        return option.key === selectedKey;\n      } else {\n        // tslint:disable-next-line:deprecation\n        return !!option.selected || !!option.isSelected;\n      }\n    });\n  }\n\n  private _onDropdownBlur = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not proceed with this logic.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // hasFocus tracks whether the root element has focus so always update the state.\n    this.setState({ hasFocus: false });\n\n    if (this.state.isOpen) {\n      // Do not onBlur when the callout is opened\n      return;\n    }\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onDropdownKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n\n    let newIndex: number | undefined;\n    const selectedIndex = this.state.selectedIndices.length ? this.state.selectedIndices[0] : -1;\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n    const isOpen = this.state.isOpen;\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        this.setState({\n          isOpen: !isOpen,\n        });\n        break;\n\n      case KeyCodes.escape:\n        if (!isOpen) {\n          return;\n        }\n\n        this.setState({\n          isOpen: false,\n        });\n        break;\n\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          if (isOpen) {\n            this.setState({ isOpen: false });\n            break;\n          }\n\n          return;\n        }\n        if (this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.down:\n        if (containsExpandCollapseModifier) {\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n        if ((containsExpandCollapseModifier && !isOpen) || this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.home:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, 1, 0, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.end:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, -1, this.props.options.length - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.space:\n        // event handled in _onDropdownKeyUp\n        break;\n\n      default:\n        return;\n    }\n\n    if (newIndex !== selectedIndex) {\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownKeyUp = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n    const isOpen = this.state.isOpen;\n\n    if (this.props.onKeyUp) {\n      this.props.onKeyUp(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n    switch (ev.which) {\n      case KeyCodes.space:\n        this.setState({\n          isOpen: !isOpen,\n        });\n        break;\n\n      default:\n        if (shouldHandleKey && isOpen) {\n          this.setState({ isOpen: false });\n        }\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  private _shouldHandleKeyUp(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n  }\n\n  private _onZoneKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    let elementToFocus;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n\n    switch (ev.which) {\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          this.setState({ isOpen: false });\n        } else {\n          if (this._host.current) {\n            elementToFocus = getLastFocusable(this._host.current, this._host.current.lastChild as HTMLElement, true);\n          }\n        }\n        break;\n\n      // All directional keystrokes should be canceled when the zone is rendered.\n      // This avoids the body scroll from reacting and thus dismissing the dropdown.\n      case KeyCodes.home:\n      case KeyCodes.end:\n      case KeyCodes.pageUp:\n      case KeyCodes.pageDown:\n        break;\n\n      case KeyCodes.down:\n        if (!containsExpandCollapseModifier && this._host.current) {\n          elementToFocus = getFirstFocusable(this._host.current, this._host.current.firstChild as HTMLElement, true);\n        }\n        break;\n\n      case KeyCodes.escape:\n        this.setState({ isOpen: false });\n        break;\n\n      case KeyCodes.tab:\n        this.setState({ isOpen: false });\n        return;\n\n      default:\n        return;\n    }\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onZoneKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n\n    if (shouldHandleKey && this.state.isOpen) {\n      this.setState({ isOpen: false });\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownClick = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    if (this.props.onClick) {\n      this.props.onClick(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n\n    const { isOpen } = this.state;\n    const disabled = this._isDisabled();\n\n    if (!disabled && !this._shouldOpenOnFocus()) {\n      this.setState({\n        isOpen: !isOpen,\n      });\n    }\n\n    this._isFocusedByClick = false; // reset\n  };\n\n  private _onDropdownMouseDown = (): void => {\n    this._isFocusedByClick = true;\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    const { isOpen, selectedIndices } = this.state;\n    const { multiSelect } = this.props;\n\n    const disabled = this._isDisabled();\n\n    if (!disabled) {\n      if (!this._isFocusedByClick && !isOpen && selectedIndices.length === 0 && !multiSelect) {\n        // Per aria: https://www.w3.org/TR/wai-aria-practices-1.1/#listbox_kbd_interaction\n        this._moveIndex(ev, 1, 0, -1);\n      }\n      if (this.props.onFocus) {\n        this.props.onFocus(ev);\n      }\n      const state: Pick<IDropdownState, 'hasFocus'> | Pick<IDropdownState, 'hasFocus' | 'isOpen'> = { hasFocus: true };\n      if (this._shouldOpenOnFocus()) {\n        (state as Pick<IDropdownState, 'hasFocus' | 'isOpen'>).isOpen = true;\n      }\n\n      this.setState(state);\n    }\n  };\n\n  /**\n   * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\n   * This helper method avoids all the repetition.\n   */\n  private _isDisabled: () => boolean | undefined = () => {\n    let { disabled } = this.props;\n    // tslint:disable-next-line:deprecation\n    const { isDisabled } = this.props;\n\n    // Remove this deprecation workaround at 1.0.0\n    if (disabled === undefined) {\n      disabled = isDisabled;\n    }\n\n    return disabled;\n  };\n\n  private _onRenderLabel = (props: IDropdownProps): JSX.Element | null => {\n    const { label, required, disabled } = props;\n\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    return label ? (\n      <Label\n        className={this._classNames.label}\n        id={this._labelId}\n        required={required}\n        styles={labelStyles}\n        disabled={disabled}\n      >\n        {label}\n      </Label>\n    ) : null;\n  };\n\n  /**\n   * Returns true if dropdown should set to open on focus.\n   * Otherwise, isOpen state should be toggled on click\n   */\n  private _shouldOpenOnFocus(): boolean {\n    const { hasFocus } = this.state;\n    const { openOnKeyboardFocus } = this.props;\n    return !this._isFocusedByClick && openOnKeyboardFocus === true && !hasFocus;\n  }\n}\n","import * as React from 'react';\r\nimport { extendComponent } from './extendComponent';\r\n\r\n/**\r\n * Generates a function to be attached to a React component, which can be called\r\n * as a replacement to RAF. In-flight async calls will be auto canceled if the component\r\n * is unmounting before the async code is executed, preventing bugs where code\r\n * accesses things within the component after being unmounted.\r\n */\r\nexport const safeRequestAnimationFrame = (component: React.Component): ((cb: Function) => void) => {\r\n  let activeTimeouts: Set<number>;\r\n\r\n  return (cb: Function) => {\r\n    if (!activeTimeouts) {\r\n      activeTimeouts = new Set<number>();\r\n\r\n      extendComponent(component, {\r\n        componentWillUnmount: () => {\r\n          activeTimeouts.forEach((id: number) => cancelAnimationFrame(id));\r\n        },\r\n      });\r\n    }\r\n\r\n    const timeoutId = requestAnimationFrame(() => {\r\n      activeTimeouts.delete(timeoutId);\r\n      cb();\r\n    });\r\n\r\n    activeTimeouts.add(timeoutId);\r\n  };\r\n};\r\n","import { IDropdownStyles, IDropdownStyleProps } from './Dropdown.types';\nimport { IStyleFunction, IsFocusVisibleClassName } from '../../Utilities';\nimport { RectangleEdge } from '../../utilities/positioning';\nimport {\n  FontWeights,\n  HighContrastSelector,\n  IRawStyle,\n  IStyle,\n  getGlobalClassNames,\n  normalize,\n  HighContrastSelectorWhite,\n  getScreenSelector,\n  ScreenWidthMinMedium,\n} from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-Dropdown-container',\n  label: 'ms-Dropdown-label',\n  dropdown: 'ms-Dropdown',\n  title: 'ms-Dropdown-title',\n  caretDownWrapper: 'ms-Dropdown-caretDownWrapper',\n  caretDown: 'ms-Dropdown-caretDown',\n  callout: 'ms-Dropdown-callout',\n  panel: 'ms-Dropdown-panel',\n  dropdownItems: 'ms-Dropdown-items',\n  dropdownItem: 'ms-Dropdown-item',\n  dropdownDivider: 'ms-Dropdown-divider',\n  dropdownOptionText: 'ms-Dropdown-optionText',\n  dropdownItemHeader: 'ms-Dropdown-header',\n  titleIsPlaceHolder: 'ms-Dropdown-titleIsPlaceHolder',\n  titleHasError: 'ms-Dropdown-title--hasError',\n};\n\nconst DROPDOWN_HEIGHT = 32;\nconst DROPDOWN_ITEM_HEIGHT = 36;\n\nconst highContrastAdjustMixin = {\n  [`${HighContrastSelector}, ${HighContrastSelectorWhite.replace('@media ', '')}`]: {\n    MsHighContrastAdjust: 'none',\n  },\n};\n\nconst highContrastItemAndTitleStateMixin: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText',\n    },\n    ...highContrastAdjustMixin,\n  },\n};\n\nconst highContrastBorderState: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      borderColor: 'Highlight',\n    },\n  },\n};\n\nconst MinimumScreenSelector = getScreenSelector(0, ScreenWidthMinMedium);\n\nexport const getStyles: IStyleFunction<IDropdownStyleProps, IDropdownStyles> = props => {\n  const {\n    theme,\n    hasError,\n    hasLabel,\n    className,\n    isOpen,\n    disabled,\n    required,\n    isRenderingPlaceholder,\n    panelClassName,\n    calloutClassName,\n    calloutRenderEdge,\n  } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base Dropdown getStyles function.');\n  }\n\n  const globalClassnames = getGlobalClassNames(GlobalClassNames, theme);\n  const { palette, semanticColors, effects, fonts } = theme;\n\n  const rootHoverFocusActiveSelectorNeutralDarkMixin: IStyle = {\n    color: semanticColors.menuItemTextHovered,\n  };\n\n  const rootHoverFocusActiveSelectorNeutralPrimaryMixin: IStyle = {\n    color: semanticColors.menuItemText,\n  };\n\n  const borderColorError: IStyle = {\n    borderColor: semanticColors.errorText,\n  };\n\n  const dropdownItemStyle: IStyle = [\n    globalClassnames.dropdownItem,\n    {\n      backgroundColor: 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: 'flex',\n      alignItems: 'center',\n      padding: '0 8px',\n      width: '100%',\n      minHeight: DROPDOWN_ITEM_HEIGHT,\n      lineHeight: 20,\n      height: 0,\n      position: 'relative',\n      border: '1px solid transparent',\n      borderRadius: 0,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n    },\n  ];\n\n  const selectedItemBackgroundColor = semanticColors.menuItemBackgroundPressed;\n\n  const itemSelectors = (isSelected: boolean = false) => {\n    return {\n      selectors: {\n        '&:hover:focus': [\n          {\n            color: semanticColors.menuItemTextHovered,\n            backgroundColor: !isSelected ? semanticColors.menuItemBackgroundHovered : selectedItemBackgroundColor,\n          },\n          highContrastItemAndTitleStateMixin,\n        ],\n        '&:focus': [\n          {\n            backgroundColor: !isSelected ? 'transparent' : selectedItemBackgroundColor,\n          },\n          highContrastItemAndTitleStateMixin,\n        ],\n        '&:active': [\n          {\n            color: semanticColors.menuItemTextHovered,\n            backgroundColor: !isSelected ? semanticColors.menuBackground : semanticColors.menuItemBackgroundHovered,\n          },\n          highContrastItemAndTitleStateMixin,\n        ],\n        [HighContrastSelector]: {\n          borderColor: 'Window',\n        },\n        [`.${IsFocusVisibleClassName} &:focus:after`]: {\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n        },\n      },\n    };\n  };\n\n  const dropdownItemSelected: IStyle = [\n    ...dropdownItemStyle,\n    {\n      backgroundColor: selectedItemBackgroundColor,\n      color: semanticColors.menuItemTextHovered,\n    },\n    itemSelectors(true),\n    highContrastItemAndTitleStateMixin,\n  ];\n\n  const dropdownItemDisabled: IStyle = [\n    ...dropdownItemStyle,\n    {\n      color: semanticColors.disabledText,\n      cursor: 'default',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const titleOpenBorderRadius =\n    calloutRenderEdge === RectangleEdge.bottom\n      ? `${effects.roundedCorner2} ${effects.roundedCorner2} 0 0`\n      : `0 0 ${effects.roundedCorner2} ${effects.roundedCorner2}`;\n\n  const calloutOpenBorderRadius =\n    calloutRenderEdge === RectangleEdge.bottom\n      ? `0 0 ${effects.roundedCorner2} ${effects.roundedCorner2}`\n      : `${effects.roundedCorner2} ${effects.roundedCorner2} 0 0`;\n\n  return {\n    root: [globalClassnames.root, className],\n    label: globalClassnames.label,\n    dropdown: [\n      globalClassnames.dropdown,\n      normalize,\n      fonts.medium,\n      {\n        color: semanticColors.menuItemText,\n        borderColor: semanticColors.focusBorder,\n        position: 'relative',\n        outline: 0,\n        userSelect: 'none',\n        selectors: {\n          ['&:hover .' + globalClassnames.title]: [\n            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,\n            { borderColor: isOpen ? palette.neutralSecondary : palette.neutralPrimary },\n            highContrastBorderState,\n          ],\n          ['&:focus .' + globalClassnames.title]: [\n            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,\n            { selectors: { [HighContrastSelector]: { color: 'Highlight' } } },\n          ],\n\n          ['&:focus:after']: [\n            {\n              pointerEvents: 'none',\n              content: \"''\",\n              position: 'absolute',\n              boxSizing: 'border-box',\n              top: '0px',\n              left: '0px',\n              width: '100%',\n              height: '100%',\n              // see https://github.com/microsoft/fluentui/pull/9182 for semantic color disc\n              border: !disabled ? `2px solid ${palette.themePrimary}` : 'none',\n              borderRadius: '2px',\n\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  color: 'Highlight',\n                },\n              },\n            },\n          ],\n          ['&:active .' + globalClassnames.title]: [\n            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,\n            { borderColor: palette.themePrimary },\n            highContrastBorderState,\n          ],\n\n          ['&:hover .' + globalClassnames.caretDown]: !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n          ['&:focus .' + globalClassnames.caretDown]: [\n            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n            { selectors: { [HighContrastSelector]: { color: 'Highlight' } } },\n          ],\n          ['&:active .' + globalClassnames.caretDown]: !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n\n          ['&:hover .' + globalClassnames.titleIsPlaceHolder]:\n            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n          ['&:focus .' + globalClassnames.titleIsPlaceHolder]:\n            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n          ['&:active .' + globalClassnames.titleIsPlaceHolder]:\n            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,\n\n          ['&:hover .' + globalClassnames.titleHasError]: borderColorError,\n          ['&:active .' + globalClassnames.titleHasError]: borderColorError,\n        },\n      },\n      isOpen && 'is-open',\n      disabled && 'is-disabled',\n      required && 'is-required',\n      required &&\n        !hasLabel && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':after': {\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    title: [\n      globalClassnames.title,\n      normalize,\n      {\n        backgroundColor: semanticColors.inputBackground,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: semanticColors.inputBorder,\n        borderRadius: isOpen ? titleOpenBorderRadius : effects.roundedCorner2,\n        cursor: 'pointer',\n        display: 'block',\n        height: DROPDOWN_HEIGHT,\n        lineHeight: DROPDOWN_HEIGHT - 2,\n        padding: `0 28px 0 8px`,\n        position: 'relative',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n      isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, { color: semanticColors.inputPlaceholderText }],\n      hasError && [globalClassnames.titleHasError, borderColorError],\n      disabled && {\n        backgroundColor: semanticColors.disabledBackground,\n        border: 'none',\n        color: semanticColors.disabledText,\n        cursor: 'default',\n        selectors: { [HighContrastSelector]: { border: '1px solid GrayText', color: 'GrayText' } },\n      },\n    ],\n    caretDownWrapper: [\n      globalClassnames.caretDownWrapper,\n      {\n        position: 'absolute',\n        top: 1,\n        right: 8,\n        height: DROPDOWN_HEIGHT,\n        lineHeight: DROPDOWN_HEIGHT - 2, // height minus the border\n      },\n      !disabled && {\n        cursor: 'pointer',\n      },\n    ],\n    caretDown: [\n      globalClassnames.caretDown,\n      { color: palette.neutralSecondary, fontSize: fonts.small.fontSize, pointerEvents: 'none' },\n      disabled && { color: semanticColors.disabledText, selectors: { [HighContrastSelector]: { color: 'GrayText' } } },\n    ],\n    errorMessage: { color: semanticColors.errorText, ...theme.fonts.small, paddingTop: 5 },\n    callout: [\n      globalClassnames.callout,\n      {\n        boxShadow: effects.elevation8,\n        borderRadius: calloutOpenBorderRadius,\n        selectors: {\n          ['.ms-Callout-main']: { borderRadius: calloutOpenBorderRadius },\n        },\n      },\n      calloutClassName,\n    ],\n    dropdownItemsWrapper: { selectors: { '&:focus': { outline: 0 } } },\n    dropdownItems: [globalClassnames.dropdownItems, { display: 'block' }],\n    dropdownItem: [...dropdownItemStyle, itemSelectors()],\n    dropdownItemSelected: dropdownItemSelected,\n    dropdownItemDisabled: dropdownItemDisabled,\n    dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, { backgroundColor: 'transparent' }],\n    dropdownItemHidden: [...dropdownItemStyle, { display: 'none' }],\n    dropdownDivider: [globalClassnames.dropdownDivider, { height: 1, backgroundColor: semanticColors.bodyDivider }],\n    dropdownOptionText: [\n      globalClassnames.dropdownOptionText,\n      {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        minWidth: 0,\n        maxWidth: '100%',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        margin: '1px',\n      },\n    ],\n    dropdownItemHeader: [\n      globalClassnames.dropdownItemHeader,\n      {\n        ...fonts.medium,\n        fontWeight: FontWeights.semibold,\n        color: semanticColors.menuHeader,\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        height: DROPDOWN_ITEM_HEIGHT,\n        lineHeight: DROPDOWN_ITEM_HEIGHT,\n        cursor: 'default',\n        padding: '0 8px',\n        userSelect: 'none',\n        textAlign: 'left',\n      },\n    ],\n    subComponentStyles: {\n      label: { root: { display: 'inline-block' } },\n      multiSelectItem: {\n        root: {\n          padding: 0,\n        },\n        label: {\n          alignSelf: 'stretch',\n          padding: '0 8px',\n          width: '100%',\n        },\n      },\n      panel: {\n        root: [panelClassName],\n        main: {\n          selectors: {\n            // In case of extra small screen sizes\n            [MinimumScreenSelector]: {\n              // panelWidth xs\n              width: 272,\n            },\n          },\n        },\n        contentInner: { padding: '0 0 20px' },\n      },\n    },\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DropdownBase } from './Dropdown.base';\nimport { getStyles } from './Dropdown.styles';\nimport { IDropdownProps, IDropdownStyleProps, IDropdownStyles } from './Dropdown.types';\n\nexport const Dropdown: React.FunctionComponent<IDropdownProps> = styled<\n  IDropdownProps,\n  IDropdownStyleProps,\n  IDropdownStyles\n>(DropdownBase, getStyles, undefined, {\n  scope: 'Dropdown',\n});\n"],"sourceRoot":""}